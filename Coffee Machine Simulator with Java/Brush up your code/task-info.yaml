type: edu
files:
  - name: src/machine/CoffeeMachine.java
    visible: true
    text: |
      package machine;
      import java.util.Scanner;
      
      public class CoffeeMachine {
          public static void main(String[] args) {
              Scanner scanner = new Scanner(System.in);
              // Setup some initial values
              int cash = 550, water = 400, milk = 540, beans = 120, cups = 9;
              String drinkSelection;
      
              // Get user input
              System.out.println("Write action (buy, fill, take, remaining, exit):");
              System.out.print("> ");
              String selection = scanner.next();
      
              while (!selection.equals("exit")) {
                  switch (selection) {
                      case "buy":
                          System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
                          System.out.print("> ");
      
                          drinkSelection = scanner.next();
                          boolean gotEnough = true;
      
                          switch (drinkSelection) {
                              case "1":
                                  //resource check
                                  if (water <= 250) {
                                      System.out.println("Sorry, not enough water!");
                                      gotEnough = false;
                                  }
                                  if (beans <= 16) {
                                      System.out.println("Sorry, not enough coffee beans!");
                                      gotEnough = false;
                                  }
                                  if (cups <= 1) {
                                      System.out.println("Sorry, not enough disposable cups!");
                                      gotEnough = false;
                                  }
      
                                  if (gotEnough) {
                                      System.out.println("I have enough resources, making you a coffee!");
                                      water -= 250;
                                      beans -= 16;
                                      cups -= 1;
                                      cash += 4;
                                  }
                                  break;
                              case "2":
                                  if (water <= 350) {
                                      System.out.println("Sorry, not enough water!");
                                      gotEnough = false;
                                  }
                                  if (milk <= 75) {
                                      System.out.println("Sorry, not enough milk!");
                                      gotEnough = false;
                                  }
                                  if (beans <= 20) {
                                      System.out.println("Sorry, not enough coffee beans!");
                                      gotEnough = false;
                                  }
                                  if (cups <= 1) {
                                      System.out.println("Sorry, not enough disposable cups!");
                                      gotEnough = false;
                                  }
      
                                  if (gotEnough) {
                                      System.out.println("I have enough resources, making you a coffee!");
                                      water -= 350;
                                      milk -= 75;
                                      beans -= 20;
                                      cups -= 1;
                                      cash += 7;
                                  }
                                  break;
                              case "3":
                                  if (water <= 200) {
                                      System.out.println("Sorry, not enough water!");
                                      gotEnough = false;
                                  }
                                  if (milk <= 100) {
                                      System.out.println("Sorry, not enough milk!");
                                      gotEnough = false;
                                  }
                                  if (beans <= 12) {
                                      System.out.println("Sorry, not enough coffee beans!");
                                      gotEnough = false;
                                  }
                                  if (cups <= 1) {
                                      System.out.println("Sorry, not enough disposable cups!");
                                      gotEnough = false;
                                  }
      
                                  if (gotEnough) {
                                      System.out.println("I have enough resources, making you a coffee!");
                                      water -= 200;
                                      milk -= 100;
                                      beans -= 12;
                                      cups -= 1;
                                      cash += 6;
                                  }
                                  break;
                              case "back":
                                  break;
                              default:
                          }
                          break;
                      case "fill":
                          //Gather the info
                          System.out.println("Write how many ml of water the coffee machine has:");
                          water += scanner.nextInt();
      
                          System.out.println("Write how many ml of milk the coffee machine has:");
                          milk += scanner.nextInt();
      
                          System.out.println("Write how many grams of coffee beans the coffee machine has:");
                          beans += scanner.nextInt();
      
                          System.out.println("Write how many disposable cups you want to add:");
                          cups += scanner.nextInt();
                          break;
                      case "take":
                          System.out.println("I gave you $" + cash);
                          cash = 0;
                          break;
                      case "remaining":
                          System.out.println("The coffee machine has:");
                          System.out.println(water + " ml of water");
                          System.out.println(milk + " ml of milk");
                          System.out.println(beans + " g of coffee beans");
                          System.out.println(cups + " disposable cups");
                          System.out.println("$" + cash + " of money");
                          System.out.println();
                          break;
                      default:
                  }
                  // Print out the initial quantities.
                  System.out.println("Write action (buy, fill, take, remaining, exit):");
                  System.out.print("> ");
                  selection = scanner.next();
              }
      
      
      
      /*
      
      
              // Work the logic
              if (minimum > coffeeCups) {
                  // we have left over ingredients
                  System.out.println("Yes, I can make that amount of coffee (and even " + (minimum - coffeeCups) +" more than that)");
              } else if (minimum < coffeeCups) {
                  // we don't have enough ingredients
                  System.out.println("No, I can make only " + minimum + " cup(s) of coffee");
              } else {
                  // we have exactly enough ingredients
                  System.out.println("Yes, I can make that amount of coffee");
              }
      
              System.out.println("For " + coffeeCups + " cups of coffee you will need:");
              System.out.println(water + " ml of water");
              System.out.println(milk + " ml of milk");
              System.out.println(beans + " g of coffee beans");
       */
          }
      }
    learner_created: false
  - name: test/CoffeeMachineTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.List;
      
      
      class TestClue {
          int water;
          int milk;
          int beans;
          int cups;
          int money;
          String feedback;
          TestClue(int w, int m, int b, int c, int mo, String feedback) {
              water = w;
              milk = m;
              beans = b;
              cups = c;
              money = mo;
              this.feedback = feedback;
          }
      }
      
      public class CoffeeMachineTest extends StageTest<TestClue> {
      
          @Override
          public List<TestCase<TestClue>> generate() {
              return List.of(
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          700 - 400,
                          390 - 540,
                          80 - 120 ,
                          7 - 9,
                          0 - 550,
                          "This test is exactly " +
                              "like in the example - try to run it by yourself"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "2\n" +
                              "buy\n" +
                              "2\n" +
                              "fill\n" +
                              "1000\n" +
                              "0\n" +
                              "0\n" +
                              "0\n" +
                              "buy\n" +
                              "2\n" +
                              "take\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          3000,
                          3000,
                          3000 ,
                          3000,
                          0,
                          "This test checks \"fill\" action"))
                      .setInput(
                          "remaining\n" +
                              "fill\n" +
                              "3000\n" +
                              "3000\n" +
                              "3000\n" +
                              "3000\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          -250,
                          0,
                          -16 ,
                          -1,
                          4, "This test checks \"buy\" " +
                          "action with the first variant of coffee"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "1\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          -350,
                          -75,
                          -20 ,
                          -1,
                          7, "This test checks \"buy\" " +
                          "action with the second variant of coffee"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "2\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          -200,
                          -100,
                          -12 ,
                          -1,
                          6, "This test checks \"buy\" " +
                          "action with the third variant of coffee"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "3\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          0,
                          0,
                          0 ,
                          0,
                          -550, "This test checks \"take\" action"))
                      .setInput(
                          "remaining\n" +
                              "take\n" +
                              "remaining\n" +
                              "exit\n"),
      
                  new TestCase<TestClue>()
                      .setAttach(new TestClue(
                          0,
                          0,
                          0 ,
                          0,
                          0, "This test checks \"back\" " +
                          "action right after \"buy\" action"))
                      .setInput(
                          "remaining\n" +
                              "buy\n" +
                              "back\n" +
                              "remaining\n" +
                              "exit\n")
              );
          }
      
          @Override
          public CheckResult check(String reply, TestClue clue) {
              String[] lines = reply.split("\\n");
      
              if (lines.length <= 1) {
                  return CheckResult.wrong("Looks like you didn't print anything!");
              }
      
              int water_ = clue.water;
              int milk_ = clue.milk;
              int beans_ = clue.beans;
              int cups_ = clue.cups;
              int money_ = clue.money;
      
              List<Integer> milk = new ArrayList<>();
              List<Integer> water = new ArrayList<>();
              List<Integer> beans = new ArrayList<>();
              List<Integer> cups = new ArrayList<>();
              List<Integer> money = new ArrayList<>();
      
              for (String line : lines) {
                  line = line.replace("$", "").trim();
                  String[] words = line.split("\\s+");
                  if (words.length == 0) {
                      continue;
                  }
                  String firstWord = words[0];
                  int amount;
                  try {
                      amount = Integer.parseInt(firstWord);
                  }
                  catch (Exception e) {
                      continue;
                  }
                  if (line.contains("milk")) {
                      milk.add(amount);
                  }
                  else if (line.contains("water")) {
                      water.add(amount);
                  }
                  else if (line.contains("beans")) {
                      beans.add(amount);
                  }
                  else if (line.contains("cups")) {
                      cups.add(amount);
                  }
                  else if (line.contains("money")) {
                      money.add(amount);
                  }
              }
      
              if (milk.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"milk\", " +
                          "found: " + milk.size());
              }
      
              if (water.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"water\", " +
                          "found: " + water.size());
              }
      
              if (beans.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"beans\", " +
                          "found: " + beans.size());
              }
      
              if (cups.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"cups\", " +
                          "found: " + cups.size());
              }
      
              if (money.size() != 2) {
                  return new CheckResult(false,
                      "There should be two lines with \"money\", " +
                          "found: " + money.size());
              }
      
              int milk0 = milk.get(0);
              int milk1 = milk.get(milk.size() - 1);
      
              int water0 = water.get(0);
              int water1 = water.get(water.size() - 1);
      
              int beans0 = beans.get(0);
              int beans1 = beans.get(beans.size() - 1);
      
              int cups0 = cups.get(0);
              int cups1 = cups.get(cups.size() - 1);
      
              int money0 = money.get(0);
              int money1 = money.get(money.size() - 1);
      
              int diffWater = water1 - water0;
              int diffMilk = milk1 - milk0;
              int diffBeans = beans1 - beans0;
              int diffCups = cups1 - cups0;
              int diffMoney = money1 - money0;
      
              boolean isCorrect =
                  diffWater == water_ &&
                      diffMilk == milk_ &&
                      diffBeans == beans_ &&
                      diffCups == cups_ &&
                      diffMoney == money_;
      
              return new CheckResult(isCorrect, clue.feedback);
          }
      }
    learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/180/implement#comment
status: Unchecked
record: -1
